import os
from utils import GroqConfig
from dotenv import load_dotenv
from groq import Groq

config = GroqConfig()
load_dotenv()
client = Groq(api_key=os.getenv("GROQ_API_KEY"))


def generate_text_summary(form_text, prompt=None, max_words=200, config=config):
    """
    Generate a summary of the provided form text using Groq API.
    Args:
        form_text (str): The text extracted from the form.
        prompt (str, optional): Custom prompt to use. Defaults to None.
        max_words (int): Maximum number of words in the summary.
        config (GroqConfig): Groq configuration object.
    Returns:
        str: The summary generated by the Groq API.
    """
    if not form_text or form_text.strip() == "":
        return "No content."

    if prompt is None:
        prompt = (
            f"Summarize the following document in under {max_words} words. "
            f"Focus on key details, roles, dates, and entities:\n\n{form_text}"
        )

    try:
        response = config.client.chat.completions.create(
            model=config.model,
            messages=[
                {
                    "role": "system",
                    "content": "You are an intelligent summarization assistant.",
                },
                {"role": "user", "content": prompt},
            ],
            temperature=0.2,
            max_tokens=1000,
        )
        summary = response.choices[0].message.content.strip()
        return summary

    except Exception as e:
        return f"[Error generating summary: {e}]"


def generate_holistic_summary(form_texts, max_words=200, config=config):
    """
    Generate a holistic summary for multiple form texts.
    Args:
        form_texts (list): List of texts extracted from multiple forms.
        max_words (int): Maximum words for summary.
        config (GroqConfig): Groq configuration object.
    Returns:
        str: The holistic summary generated by the Groq API.
    """
    if not form_texts or all(not t.strip() for t in form_texts):
        return "No content to summarize."

    combined_text = "\n\n".join(form_texts)

    prompt = f"""
            You are an intelligent assistant tasked with summarizing multiple documents. 
            Create a clear, concise, and structured summary of the information provided below. 

            Instructions:

            1. Organize the summary into logical sections or bullet points based on the content. 
            2. Highlight important details such as individuals, roles, organizations, projects, skills, events, or relationships, but do not invent any information. 
            3. Maintain the context and connections across different documents. 
            4. Keep the summary concise, ideally under {max_words} words, but preserve all key details necessary for understanding the documents. 
            5. Use clear and professional language that can be read easily.

            Documents:
            {combined_text}
            """

    return generate_text_summary(
        combined_text, prompt=prompt, max_words=max_words, config=config
    )
